{"version":3,"sources":["piece.js"],"names":["PieceType","Bishop","King","Knight","Pawn","Queen","Rook","SideType","Black","name","White","Piece","side","notation","moveCount","type"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAaA;AACO,IAAIA,SAAS,GAAG;AACtBC,EAAAA,MAAM,EAAG,QADa;AAEtBC,EAAAA,IAAI,EAAG,MAFe;AAGtBC,EAAAA,MAAM,EAAG,QAHa;AAItBC,EAAAA,IAAI,EAAG,MAJe;AAKtBC,EAAAA,KAAK,EAAG,OALc;AAMtBC,EAAAA,IAAI,EAAG;AANe,CAAhB;;AASA,IAAIC,QAAQ,GAAG;AACrBC,EAAAA,KAAK,EAAG;AAAEC,IAAAA,IAAI,EAAG;AAAT,GADa;AAErBC,EAAAA,KAAK,EAAG;AAAED,IAAAA,IAAI,EAAG;AAAT;AAFa,CAAf;;;IAKME,K;;;AACZ,iBAAaC,IAAb,EAAmBC,QAAnB,EAA6B;AAAA;AAC5B,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKG,IAAL,GAAY,IAAZ;AACA;;;;iCAEoBH,I,EAAM;AAC1B,aAAO,IAAIX,MAAJ,CAAWW,IAAX,CAAP;AACA;;;+BAEkBA,I,EAAM;AACxB,aAAO,IAAIV,IAAJ,CAASU,IAAT,CAAP;AACA;;;iCAEoBA,I,EAAM;AAC1B,aAAO,IAAIT,MAAJ,CAAWS,IAAX,CAAP;AACA;;;+BAEkBA,I,EAAM;AACxB,aAAO,IAAIR,IAAJ,CAASQ,IAAT,CAAP;AACA;;;gCAEmBA,I,EAAM;AACzB,aAAO,IAAIP,KAAJ,CAAUO,IAAV,CAAP;AACA;;;+BAEkBA,I,EAAM;AACxB,aAAO,IAAIN,IAAJ,CAASM,IAAT,CAAP;AACA;;;;;;;IAGWX,M;;;;;AACZ,kBAAaW,IAAb,EAAmB;AAAA;;AAAA;AAClB,4GAAMA,IAAN,EAAY,GAAZ;AAEA,UAAKG,IAAL,GAAYf,SAAS,CAACC,MAAtB;AAHkB;AAIlB;;;EAL0BU,K;;;;IAQfT,I;;;;;AACZ,gBAAaU,IAAb,EAAmB;AAAA;;AAAA;AAClB,2GAAMA,IAAN,EAAY,GAAZ;AAEA,WAAKG,IAAL,GAAYf,SAAS,CAACE,IAAtB;AAHkB;AAIlB;;;EALwBS,K;;;;IAQbR,M;;;;;AACZ,kBAAaS,IAAb,EAAmB;AAAA;;AAAA;AAClB,6GAAMA,IAAN,EAAY,GAAZ;AAEA,WAAKG,IAAL,GAAYf,SAAS,CAACG,MAAtB;AAHkB;AAIlB;;;EAL0BQ,K;;;;IAQfP,I;;;;;AACZ,gBAAaQ,IAAb,EAAmB;AAAA;;AAAA;AAClB,2GAAMA,IAAN,EAAY,EAAZ;AAEA,WAAKG,IAAL,GAAYf,SAAS,CAACI,IAAtB;AAHkB;AAIlB;;;EALwBO,K;;;;IAQbN,K;;;;;AACZ,iBAAaO,IAAb,EAAmB;AAAA;;AAAA;AAClB,4GAAMA,IAAN,EAAY,GAAZ;AAEA,WAAKG,IAAL,GAAYf,SAAS,CAACK,KAAtB;AAHkB;AAIlB;;;EALyBM,K;;;;IAQdL,I;;;;;AACZ,gBAAaM,IAAb,EAAmB;AAAA;;AAAA;AAClB,2GAAMA,IAAN,EAAY,GAAZ;AAEA,WAAKG,IAAL,GAAYf,SAAS,CAACM,IAAtB;AAHkB;AAIlB;;;EALwBK,K;;;eAQX;AACdA,EAAAA,KAAK,EAALA,KADc;AAEdX,EAAAA,SAAS,EAATA,SAFc;AAGdO,EAAAA,QAAQ,EAARA;AAHc,C","sourcesContent":["/**\n\tThe Piece is a definition of a piece that can be played on the board.\n\n\tThe uid property of the Piece is not intended to be durable across\n\tsessions, but only to uniquely identify the piece on the board. Right\n\tnow the property is used by board.getSquareByPiece as pieces are not\n\totherwise uniquely identifiable (i.e. getSquareByPiece(Pawn) would\n\treturn the first square found with a Pawn on it rather than the exact\n\tsquare intended). Additionally, the uid of the Piece is used in\n\tBoardValidation to ensure there is correllation between the piece and\n\tvalid squares to which the piece can move.\n*/\n\n// types\nexport var PieceType = {\n\tBishop : 'bishop',\n\tKing : 'king',\n\tKnight : 'knight',\n\tPawn : 'pawn',\n\tQueen : 'queen',\n\tRook : 'rook'\n};\n\nexport var SideType = {\n\tBlack : { name : 'black' },\n\tWhite : { name : 'white' }\n};\n\nexport class Piece {\n\tconstructor (side, notation) {\n\t\tthis.moveCount = 0;\n\t\tthis.notation = notation;\n\t\tthis.side = side;\n\t\tthis.type = null;\n\t}\n\n\tstatic createBishop (side) {\n\t\treturn new Bishop(side);\n\t}\n\n\tstatic createKing (side) {\n\t\treturn new King(side);\n\t}\n\n\tstatic createKnight (side) {\n\t\treturn new Knight(side);\n\t}\n\n\tstatic createPawn (side) {\n\t\treturn new Pawn(side);\n\t}\n\n\tstatic createQueen (side) {\n\t\treturn new Queen(side);\n\t}\n\n\tstatic createRook (side) {\n\t\treturn new Rook(side);\n\t}\n}\n\nexport class Bishop extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'B');\n\n\t\tthis.type = PieceType.Bishop;\n\t}\n}\n\nexport class King extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'K');\n\n\t\tthis.type = PieceType.King;\n\t}\n}\n\nexport class Knight extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'N');\n\n\t\tthis.type = PieceType.Knight;\n\t}\n}\n\nexport class Pawn extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, '');\n\n\t\tthis.type = PieceType.Pawn;\n\t}\n}\n\nexport class Queen extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'Q');\n\n\t\tthis.type = PieceType.Queen;\n\t}\n}\n\nexport class Rook extends Piece {\n\tconstructor (side) {\n\t\tsuper(side, 'R');\n\n\t\tthis.type = PieceType.Rook;\n\t}\n}\n\nexport default {\n\tPiece,\n\tPieceType,\n\tSideType\n};\n"],"file":"piece.js"}