{"version":3,"sources":["simpleGameClient.js"],"names":["isMoveValid","src","dest","validMoves","i","isFound","expr","sq","file","rank","squares","length","updateGameClient","gameClient","validation","start","err","result","Error","isCheck","isCheckmate","isRepetition","isStalemate","SimpleGameClient","game","GameValidation","create","on","attackers","emit","forceUpdate","board","promo","move","side","getCurrentSide","piece","Piece","createBishop","createKnight","createQueen","createRook","promote","postSquare","Game","EventEmitter"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { Game } from './game';\nimport { GameValidation } from './gameValidation';\nimport { Piece } from './piece';\n\n// private methods\nfunction isMoveValid (src, dest, validMoves) {\n\tlet\n\t\ti = 0,\n\t\tisFound = (expr, sq) => {\n\t\t\treturn ((typeof expr === 'string' && sq.file + sq.rank === expr) ||\n\t\t\t\t(expr.rank && expr.file &&\n\t\t\t\t\tsq.file === expr.file && sq.rank === expr.rank));\n\t\t},\n\t\tsquares = [];\n\n\tfor (i = 0; i < validMoves.length; i++) {\n\t\tif (isFound(src, validMoves[i].src)) {\n\t\t\tsquares = validMoves[i].squares;\n\t\t}\n\t}\n\n\tif (squares && squares.length > 0) {\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\tif (isFound(dest, squares[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction updateGameClient (gameClient) {\n\treturn gameClient.validation.start((err, result) => {\n\t\tif (err) {\n\t\t\tthrow new Error(err);\n\t\t}\n\n\t\tgameClient.isCheck = result.isCheck;\n\t\tgameClient.isCheckmate = result.isCheckmate;\n\t\tgameClient.isRepetition = result.isRepetition;\n\t\tgameClient.isStalemate = result.isStalemate;\n\t\tgameClient.validMoves = result.validMoves;\n\t});\n}\n\n// ctor\nexport class SimpleGameClient extends EventEmitter {\n\tconstructor (game) {\n\t\tsuper();\n\n\t\tthis.isCheck = false;\n\t\tthis.isCheckmate = false;\n\t\tthis.isRepetition = false;\n\t\tthis.isStalemate = false;\n\t\tthis.game = game;\n\t\tthis.validMoves = [];\n\t\tthis.validation = GameValidation.create(this.game);\n\n\t\t// bubble the game check event\n\t\tthis.game.on('check', (attackers) => (this.emit('check', attackers)));\n\t}\n\n\tstatic create () {\n\t\tlet\n\t\t\tgame = Game.create(),\n\t\t\tgameClient = new SimpleGameClient(game);\n\n\t\tupdateGameClient(gameClient);\n\n\t\treturn gameClient;\n\t}\n\n\tgetStatus (forceUpdate) {\n\t\tif (forceUpdate) {\n\t\t\tupdateGameClient(this);\n\t\t}\n\n\t\treturn {\n\t\t\tboard : this.game.board,\n\t\t\tisCheck : this.isCheck,\n\t\t\tisCheckmate : this.isCheckmate,\n\t\t\tisRepetition : this.isRepetition,\n\t\t\tisStalemate : this.isStalemate,\n\t\t\tvalidMoves : this.validMoves\n\t\t};\n\t}\n\n\tmove (src, dest, promo) {\n\t\tlet\n\t\t\tmove = null,\n\t\t\tside = this.game.getCurrentSide();\n\n\tif (src && dest && isMoveValid(src, dest, this.validMoves)) {\n\t\tmove = this.game.board.move(src, dest);\n\n\t\tif (move) {\n\t\t\t// apply pawn promotion if applicable\n\t\t\tif (promo) {\n\t\t\t\tlet piece;\n\n\t\t\t\tswitch (promo) {\n\t\t\t\t\tcase 'B':\n\t\t\t\t\t\tpiece = Piece.createBishop(side);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'N':\n\t\t\t\t\t\tpiece = Piece.createKnight(side);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Q':\n\t\t\t\t\t\tpiece = Piece.createQueen(side);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\tpiece = Piece.createRook(side);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tpiece = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (piece) {\n\t\t\t\t\tthis.game.board.promote(move.move.postSquare, piece);\n\t\t\t\t\t/*\n\t\t\t\t\tp.moveCount = move.move.postSquare.piece.moveCount;\n\t\t\t\t\tmove.move.postSquare.piece = p;\n\t\t\t\t\t//*/\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateGameClient(this);\n\t\t\treturn move;\n\t\t}\n\t}\n\n\tthrow new Error(`Move is invalid (${ src } to ${ dest })`);\n\t}\n}\n\nexport default { SimpleGameClient };\n"],"file":"simpleGameClient.js"}