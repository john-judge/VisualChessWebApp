{"version":3,"sources":["game.js"],"names":["addToHistory","game","ev","hashCode","getHashCode","move","Move","prevSquare","postSquare","capturedPiece","algebraic","moveHistory","push","denotePromotionInHistory","latest","length","promotion","Game","board","SideType","White","Black","i","sum","crypto","createHash","squares","piece","update","file","rank","side","notation","digest","Board","create","on","getSquare","prevFile","prevRank","postFile","postRank","EventEmitter","originSquare","targetSquare","hash"],"mappings":"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","sourcesContent":["/**\n\tGames contain the history of a board and the board itself.\n\n\tAt time of writing this, the game is also intended to store some\n\tdegree of information regarding the opponents and keys that\n\tcould be used for storage, etc.\n*/\nimport { Board } from './board';\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport { SideType } from './piece';\n\nfunction addToHistory (game) {\n\treturn (ev) => {\n\t\tlet\n\t\t\thashCode = game.getHashCode(),\n\t\t\tmove = new Move(\n\t\t\t\tev.prevSquare,\n\t\t\t\tev.postSquare,\n\t\t\t\tev.capturedPiece,\n\t\t\t\tev.algebraic,\n\t\t\t\thashCode);\n\n\t\tgame.moveHistory.push(move);\n\t};\n}\n\nfunction denotePromotionInHistory (game) {\n\treturn () => {\n\t\tlet\n\t\t\tlatest = game.moveHistory[\n\t\t\tgame.moveHistory.length - 1];\n\n\t\tif (latest) {\n\t\t\tlatest.promotion = true;\n\t\t}\n\t};\n}\n\nexport class Game extends EventEmitter {\n\tconstructor (board) {\n\t\tsuper();\n\n\t\tthis.board = board;\n\t\tthis.moveHistory = [];\n\t}\n\n\tstatic create () {\n\t\tlet\n\t\t\tboard = Board.create(),\n\t\t\tgame = new Game(board);\n\n\t\t// handle move and promotion events correctly\n\t\tboard.on('move', addToHistory(game));\n\t\tboard.on('promote', denotePromotionInHistory(game));\n\n\t\treturn game;\n\t}\n\n\tgetCurrentSide () {\n\t\treturn this.moveHistory.length % 2 === 0 ?\n\t\t\tSideType.White :\n\t\t\tSideType.Black;\n\t}\n\n\tgetHashCode () {\n\t\tlet\n\t\t\ti = 0,\n\t\t\tsum = crypto.createHash('md5');\n\n\t\tfor (i = 0; i < this.board.squares.length; i++) {\n\t\t\tif (this.board.squares[i].piece !== null) {\n\t\t\t\tsum.update(this.board.squares[i].file +\n\t\t\t\t\tthis.board.squares[i].rank +\n\t\t\t\t\t(this.board.squares[i].piece.side === SideType.White ? 'w' : 'b') +\n\t\t\t\t\tthis.board.squares[i].piece.notation +\n\t\t\t\t\t(i < (this.board.squares.length - 1) ? '-' : ''));\n\t\t\t}\n\t\t}\n\n\t\t// generate hash code for board\n\t\treturn sum.digest('base64');\n\t}\n\n\tstatic load (moveHistory) {\n\t\tlet\n\t\t\tboard = Board.create(),\n\t\t\tgame = new Game(),\n\t\t\ti = 0;\n\n\t\t// handle move and promotion events correctly\n\t\tboard.on('move', addToHistory(game));\n\t\tboard.on('promote', denotePromotionInHistory(game));\n\n\t\t// apply move history\n\t\tfor (i = 0; i < moveHistory.length; i++) {\n\t\t\tboard.move(\n\t\t\t\tboard.getSquare(\n\t\t\t\t\tmoveHistory[i].prevFile,\n\t\t\t\t\tmoveHistory[i].prevRank),\n\t\t\t\tboard.getSquare(\n\t\t\t\t\tmoveHistory[i].postFile,\n\t\t\t\t\tmoveHistory[i].postRank));\n\t\t}\n\n\t\treturn game;\n\t}\n}\n\nexport class Move {\n\tconstructor (originSquare, targetSquare, capturedPiece, notation, hash) {\n\t\tthis.algebraic = notation;\n\t\tthis.capturedPiece = capturedPiece;\n\t\tthis.hashCode = hash;\n\t\tthis.piece = targetSquare.piece;\n\t\tthis.promotion = false;\n\t\tthis.postFile = targetSquare.file;\n\t\tthis.postRank = targetSquare.rank;\n\t\tthis.prevFile = originSquare.file;\n\t\tthis.prevRank = originSquare.rank;\n\t}\n}\n\nexport default { Game, Move };\n"],"file":"game.js"}