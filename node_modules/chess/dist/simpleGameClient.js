"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SimpleGameClient = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _events = require("events");

var _game = require("./game");

var _gameValidation = require("./gameValidation");

var _piece = require("./piece");

// private methods
function isMoveValid(src, dest, validMoves) {
  var i = 0,
      isFound = function isFound(expr, sq) {
    return typeof expr === 'string' && sq.file + sq.rank === expr || expr.rank && expr.file && sq.file === expr.file && sq.rank === expr.rank;
  },
      squares = [];

  for (i = 0; i < validMoves.length; i++) {
    if (isFound(src, validMoves[i].src)) {
      squares = validMoves[i].squares;
    }
  }

  if (squares && squares.length > 0) {
    for (i = 0; i < squares.length; i++) {
      if (isFound(dest, squares[i])) {
        return true;
      }
    }
  }

  return false;
}

function updateGameClient(gameClient) {
  return gameClient.validation.start(function (err, result) {
    if (err) {
      throw new Error(err);
    }

    gameClient.isCheck = result.isCheck;
    gameClient.isCheckmate = result.isCheckmate;
    gameClient.isRepetition = result.isRepetition;
    gameClient.isStalemate = result.isStalemate;
    gameClient.validMoves = result.validMoves;
  });
} // ctor


var SimpleGameClient =
/*#__PURE__*/
function (_EventEmitter) {
  (0, _inherits2.default)(SimpleGameClient, _EventEmitter);

  function SimpleGameClient(game) {
    var _this;

    (0, _classCallCheck2.default)(this, SimpleGameClient);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SimpleGameClient).call(this));
    _this.isCheck = false;
    _this.isCheckmate = false;
    _this.isRepetition = false;
    _this.isStalemate = false;
    _this.game = game;
    _this.validMoves = [];
    _this.validation = _gameValidation.GameValidation.create(_this.game); // bubble the game check event

    _this.game.on('check', function (attackers) {
      return _this.emit('check', attackers);
    });

    return _this;
  }

  (0, _createClass2.default)(SimpleGameClient, [{
    key: "getStatus",
    value: function getStatus(forceUpdate) {
      if (forceUpdate) {
        updateGameClient(this);
      }

      return {
        board: this.game.board,
        isCheck: this.isCheck,
        isCheckmate: this.isCheckmate,
        isRepetition: this.isRepetition,
        isStalemate: this.isStalemate,
        validMoves: this.validMoves
      };
    }
  }, {
    key: "move",
    value: function move(src, dest, promo) {
      var move = null,
          side = this.game.getCurrentSide();

      if (src && dest && isMoveValid(src, dest, this.validMoves)) {
        move = this.game.board.move(src, dest);

        if (move) {
          // apply pawn promotion if applicable
          if (promo) {
            var piece;

            switch (promo) {
              case 'B':
                piece = _piece.Piece.createBishop(side);
                break;

              case 'N':
                piece = _piece.Piece.createKnight(side);
                break;

              case 'Q':
                piece = _piece.Piece.createQueen(side);
                break;

              case 'R':
                piece = _piece.Piece.createRook(side);
                break;

              default:
                piece = null;
                break;
            }

            if (piece) {
              this.game.board.promote(move.move.postSquare, piece);
              /*
              p.moveCount = move.move.postSquare.piece.moveCount;
              move.move.postSquare.piece = p;
              //*/
            }
          }

          updateGameClient(this);
          return move;
        }
      }

      throw new Error("Move is invalid (".concat(src, " to ").concat(dest, ")"));
    }
  }], [{
    key: "create",
    value: function create() {
      var game = _game.Game.create(),
          gameClient = new SimpleGameClient(game);

      updateGameClient(gameClient);
      return gameClient;
    }
  }]);
  return SimpleGameClient;
}(_events.EventEmitter);

exports.SimpleGameClient = SimpleGameClient;
var _default = {
  SimpleGameClient: SimpleGameClient
};
exports.default = _default;
//# sourceMappingURL=simpleGameClient.js.map
