"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Move = exports.Game = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _board = require("./board");

var _crypto = _interopRequireDefault(require("crypto"));

var _events = require("events");

var _piece = require("./piece");

/**
	Games contain the history of a board and the board itself.

	At time of writing this, the game is also intended to store some
	degree of information regarding the opponents and keys that
	could be used for storage, etc.
*/
function addToHistory(game) {
  return function (ev) {
    var hashCode = game.getHashCode(),
        move = new Move(ev.prevSquare, ev.postSquare, ev.capturedPiece, ev.algebraic, hashCode);
    game.moveHistory.push(move);
  };
}

function denotePromotionInHistory(game) {
  return function () {
    var latest = game.moveHistory[game.moveHistory.length - 1];

    if (latest) {
      latest.promotion = true;
    }
  };
}

var Game =
/*#__PURE__*/
function (_EventEmitter) {
  (0, _inherits2.default)(Game, _EventEmitter);

  function Game(board) {
    var _this;

    (0, _classCallCheck2.default)(this, Game);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Game).call(this));
    _this.board = board;
    _this.moveHistory = [];
    return _this;
  }

  (0, _createClass2.default)(Game, [{
    key: "getCurrentSide",
    value: function getCurrentSide() {
      return this.moveHistory.length % 2 === 0 ? _piece.SideType.White : _piece.SideType.Black;
    }
  }, {
    key: "getHashCode",
    value: function getHashCode() {
      var i = 0,
          sum = _crypto.default.createHash('md5');

      for (i = 0; i < this.board.squares.length; i++) {
        if (this.board.squares[i].piece !== null) {
          sum.update(this.board.squares[i].file + this.board.squares[i].rank + (this.board.squares[i].piece.side === _piece.SideType.White ? 'w' : 'b') + this.board.squares[i].piece.notation + (i < this.board.squares.length - 1 ? '-' : ''));
        }
      } // generate hash code for board


      return sum.digest('base64');
    }
  }], [{
    key: "create",
    value: function create() {
      var board = _board.Board.create(),
          game = new Game(board); // handle move and promotion events correctly


      board.on('move', addToHistory(game));
      board.on('promote', denotePromotionInHistory(game));
      return game;
    }
  }, {
    key: "load",
    value: function load(moveHistory) {
      var board = _board.Board.create(),
          game = new Game(),
          i = 0; // handle move and promotion events correctly


      board.on('move', addToHistory(game));
      board.on('promote', denotePromotionInHistory(game)); // apply move history

      for (i = 0; i < moveHistory.length; i++) {
        board.move(board.getSquare(moveHistory[i].prevFile, moveHistory[i].prevRank), board.getSquare(moveHistory[i].postFile, moveHistory[i].postRank));
      }

      return game;
    }
  }]);
  return Game;
}(_events.EventEmitter);

exports.Game = Game;

var Move = function Move(originSquare, targetSquare, capturedPiece, notation, hash) {
  (0, _classCallCheck2.default)(this, Move);
  this.algebraic = notation;
  this.capturedPiece = capturedPiece;
  this.hashCode = hash;
  this.piece = targetSquare.piece;
  this.promotion = false;
  this.postFile = targetSquare.file;
  this.postRank = targetSquare.rank;
  this.prevFile = originSquare.file;
  this.prevRank = originSquare.rank;
};

exports.Move = Move;
var _default = {
  Game: Game,
  Move: Move
};
exports.default = _default;
//# sourceMappingURL=game.js.map
