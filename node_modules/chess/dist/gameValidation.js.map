{"version":3,"sources":["gameValidation.js"],"names":["GameValidation","game","side","i","squares","board","getSquares","length","piece","type","PieceType","King","hash","hashCount","moveHistory","hashCode","callback","err","result","resolve","reject","kingSquare","isCheck","isCheckmate","isFiftyMoveDraw","isRepetition","isStalemate","validMoves","setResult","v","isKingAttacked","BoardValidation","create","findKingSquare","getCurrentSide","start","isSquareAttacked","Error"],"mappings":"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","sourcesContent":["/**\n\tGameValidation is the 3rd phase of validation for the game\n\tand is intended to support Game level events. Examples of Game\n\tscope validation include Check, Checkmate, 3-fold position\n\trepetition and pawn promotion.\n*/\nimport { BoardValidation } from './boardValidation';\nimport { PieceType } from './piece';\n\nexport class GameValidation {\n\tconstructor (game) {\n\t\tthis.game = game;\n\t}\n\n\tstatic create (game) {\n\t\treturn new GameValidation(game);\n\t}\n\n\tfindKingSquare (side) {\n\t\tlet\n\t\t\ti = 0,\n\t\t\tsquares = this.game.board.getSquares(side);\n\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\tif (squares[i].piece.type === PieceType.King) {\n\t\t\t\treturn squares[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tisRepetition () {\n\t\tlet\n\t\t\thash = '',\n\t\t\thashCount = [],\n\t\t\ti = 0;\n\n\t\t// analyze 3-fold repetition (draw)\n\t\tfor (i = 0; i < this.game.moveHistory.length; i++) {\n\t\t\thash = this.game.moveHistory[i].hashCode;\n\t\t\thashCount[hash] = hashCount[hash] ? hashCount[hash] + 1 : 1;\n\n\t\t\t/* eslint no-magic-numbers: 0 */\n\t\t\tif (hashCount[hash] === 3) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tstart (callback) {\n\t\t// ensure callback is set\n\t\tcallback = callback || ((err, result) => new Promise((resolve, reject) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(result);\n\t\t}));\n\n\t\tlet\n\t\t\tkingSquare = null,\n\t\t\tresult = {\n\t\t\t\tisCheck : false,\n\t\t\t\tisCheckmate : false,\n\t\t\t\tisFiftyMoveDraw : false,\n\t\t\t\tisRepetition : false,\n\t\t\t\tisStalemate : false,\n\t\t\t\tvalidMoves : []\n\t\t\t},\n\t\t\tsetResult = (v, result, isKingAttacked) => {\n\t\t\t\treturn (err, validMoves) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.isCheck = isKingAttacked && validMoves.length > 0;\n\t\t\t\t\tresult.isCheckmate = isKingAttacked && validMoves.length === 0;\n\t\t\t\t\tresult.isStalemate = !isKingAttacked && validMoves.length === 0;\n\t\t\t\t\tresult.isRepetition = v.isRepetition();\n\t\t\t\t\tresult.validMoves = validMoves;\n\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t};\n\t\t\t},\n\t\t\tv = BoardValidation.create(this.game);\n\n\t\tif (this.game) {\n\t\t\t// find current side king square\n\t\t\tkingSquare = this.findKingSquare(this.game.getCurrentSide());\n\n\t\t\t// find valid moves\n\t\t\treturn v.start(setResult(this, result, v.isSquareAttacked(kingSquare)));\n\t\t} else {\n\t\t\treturn callback(new Error('game is invalid'));\n\t\t}\n\t}\n}\n\nexport default { GameValidation };\n"],"file":"gameValidation.js"}