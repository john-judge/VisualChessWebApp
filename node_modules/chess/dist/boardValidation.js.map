{"version":3,"sources":["boardValidation.js"],"names":["BoardValidation","game","board","validMoves","getValidSquares","sq","i","length","src","squares","interimMove","rank","getCurrentSide","SideType","White","getSquare","e","piece","type","PieceType","King","moveCount","isSquareAttacked","a","Rook","b","c","d","move","undo","push","h","g","f","kingSquare","moves","filteredMoves","isCheck","n","r","attacked","blocked","isAttacked","context","currentSquare","getNeighborSquare","side","square","PieceValidation","create","start","setAttacked","isAttackedByKnight","Knight","self","err","NeighborType","Above","AboveRight","Right","BelowRight","Below","BelowLeft","Left","AboveLeft","KnightAboveRight","KnightRightAbove","KnightBelowRight","KnightRightBelow","KnightBelowLeft","KnightLeftBelow","KnightAboveLeft","KnightLeftAbove","filter","result","findAttackers","callback","resolve","reject","setValidMoves","v","getSquares","evaluateCastle","filterKingAttack","forEach","attacker","emit","attackingSquare","Error"],"mappings":"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","sourcesContent":["/**\n\tBoardValidation determines viable move options for all pieces\n\tgiven the current state of the board. If it's the White sides turn\n\tto attack, only White piece move options are evaluated (and visa versa).\n\n\tBoardValidation is intended to be the 2nd phase of move\n\tvalidation that is capable of taking into account factors across pieces\n\ton the board (and not just the pieces themselves). For example, King\n\tcastle eligibility is determined based on whether or not both the candidate\n\tKing and Rook pieces have not moved and whether or not the path of travel\n\tfor the King would result in the King being placed in check at any\n\tpoint during the travel. Individual Piece validation wouldn't be sufficient\n\tto determine whether or not this move is possible.\n\n\tAdditionally, isSquareAttacked exists on the BoardValidation object. While\n\tthis method could have easily existed within the PieceValidation object\n\tI've kept it in BoardValidation so that PieceValidation remains truly\n\tagnostic of the other pieces on the same board.\n\n\tDue to how BoardValidation actually functions, the client only needs to\n\tinstantiate a BoardValidation for the Game and call the start method\n\tin order to evaluate every Piece's valid move options. There is no need\n\tto call PieceValidation (and doing so wouldn't give an accurate picture\n\tof what is possible anyway).\n*/\nimport { PieceType, SideType } from './piece';\nimport { NeighborType } from './board';\nimport { PieceValidation } from './pieceValidation';\n\nexport class BoardValidation {\n\tconstructor (game) {\n\t\tthis.board = game ? game.board : null;\n\t\tthis.game = game;\n\t}\n\n\tstatic create (game) {\n\t\treturn new BoardValidation(game);\n\t}\n\n\tevaluateCastle (validMoves) {\n\t\tlet\n\t\t\tgetValidSquares = (sq) => {\n\t\t\t\tlet i = 0;\n\n\t\t\t\tfor (i = 0; i < validMoves.length; i++) {\n\t\t\t\t\tif (validMoves[i].src === sq) {\n\t\t\t\t\t\treturn validMoves[i].squares;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tinterimMove = null,\n\t\t\t/* eslint no-magic-numbers: 0 */\n\t\t\trank = this.game.getCurrentSide() === SideType.White ? 1 : 8,\n\t\t\tsquares = {\n\t\t\t\t'a' : this.board.getSquare('a', rank),\n\t\t\t\t'b' : this.board.getSquare('b', rank),\n\t\t\t\t'c' : this.board.getSquare('c', rank),\n\t\t\t\t'd' : this.board.getSquare('d', rank),\n\t\t\t\t'e' : this.board.getSquare('e', rank),\n\t\t\t\t'f' : this.board.getSquare('f', rank),\n\t\t\t\t'g' : this.board.getSquare('g', rank),\n\t\t\t\t'h' : this.board.getSquare('h', rank)\n\t\t\t};\n\n\t\t// is king eligible\n\t\tif (squares.e.piece &&\n\t\t\t\tsquares.e.piece.type === PieceType.King &&\n\t\t\t\tsquares.e.piece.moveCount === 0 &&\n\t\t\t\t!this.isSquareAttacked(squares.e)) {\n\n\t\t\t// is left rook eligible\n\t\t\tif (squares.a.piece &&\n\t\t\t\t\tsquares.a.piece.type === PieceType.Rook &&\n\t\t\t\t\tsquares.a.piece.moveCount === 0) {\n\n\t\t\t\t// are the squares between king and rook clear\n\t\t\t\tif (!squares.b.piece &&\n\t\t\t\t\t\t!squares.c.piece &&\n\t\t\t\t\t\t!squares.d.piece) {\n\n\t\t\t\t\t// when king moves through squares between, is it in check\n\t\t\t\t\tinterimMove = this.board.move(squares.e, squares.d, true);\n\t\t\t\t\tif (!this.isSquareAttacked(squares.d)) {\n\t\t\t\t\t\tinterimMove.undo();\n\t\t\t\t\t\tinterimMove = this.board.move(squares.e, squares.c, true);\n\n\t\t\t\t\t\tif (!this.isSquareAttacked(squares.c)) {\n\t\t\t\t\t\t\tgetValidSquares(squares.e).push(squares.c);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinterimMove.undo();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// is right rook eligible\n\t\t\tif (squares.h.piece &&\n\t\t\t\t\tsquares.h.piece.type === PieceType.Rook &&\n\t\t\t\t\tsquares.h.piece.moveCount === 0) {\n\n\t\t\t\t// are the squares between king and rook clear\n\t\t\t\tif (!squares.g.piece && !squares.f.piece) {\n\t\t\t\t\t// when king moves through squares between, is it in check\n\t\t\t\t\tinterimMove = this.board.move(squares.e, squares.f, true);\n\t\t\t\t\tif (!this.isSquareAttacked(squares.f)) {\n\t\t\t\t\t\tinterimMove.undo();\n\t\t\t\t\t\tinterimMove = this.board.move(squares.e, squares.g, true);\n\n\t\t\t\t\t\tif (!this.isSquareAttacked(squares.g)) {\n\t\t\t\t\t\t\tgetValidSquares(squares.e).push(squares.g);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinterimMove.undo();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfilterKingAttack (kingSquare, moves) {\n\t\tlet\n\t\t\tfilteredMoves = [],\n\t\t\ti = 0,\n\t\t\tisCheck = false,\n\t\t\tn = 0,\n\t\t\tr = null,\n\t\t\tsquares = [];\n\n\t\tfor (i = 0; i < moves.length; i++) {\n\t\t\tsquares = [];\n\n\t\t\tfor (n = 0; n < moves[i].squares.length; n++) {\n\t\t\t\t// simulate move on the board\n\t\t\t\tr = this.board.move(moves[i].src, moves[i].squares[n], true);\n\n\t\t\t\t// check if king is attacked\n\t\t\t\tif (moves[i].squares[n].piece.type !== PieceType.King) {\n\t\t\t\t\tisCheck = this.isSquareAttacked(kingSquare);\n\t\t\t\t} else {\n\t\t\t\t\tisCheck = this.isSquareAttacked(moves[i].squares[n]);\n\t\t\t\t}\n\n\t\t\t\t// reverse the move\n\t\t\t\tr.undo();\n\n\t\t\t\tif (!isCheck) {\n\t\t\t\t\tsquares.push(moves[i].squares[n]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (squares && squares.length > 0) {\n\t\t\t\tfilteredMoves.push({\n\t\t\t\t\tsquares,\n\t\t\t\t\tsrc : moves[i].src\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn filteredMoves;\n\t}\n\n\tfindAttackers (sq) {\n\t\tif (!sq || !sq.piece) {\n\t\t\treturn {\n\t\t\t\tattacked : false,\n\t\t\t\tblocked : false\n\t\t\t};\n\t\t}\n\n\t\tlet\n\t\t\t/* eslint no-invalid-this: 0 */\n\t\t\tisAttacked = (b, n) => {\n\t\t\t\tlet\n\t\t\t\t\tcontext = {},\n\t\t\t\t\tcurrentSquare = b.getNeighborSquare(sq, n);\n\n\t\t\t\twhile (currentSquare) {\n\t\t\t\t\tcontext = {\n\t\t\t\t\t\tattacked : currentSquare.piece && currentSquare.piece.side !== sq.piece.side,\n\t\t\t\t\t\tblocked : currentSquare.piece && currentSquare.piece.side === sq.piece.side,\n\t\t\t\t\t\tpiece : currentSquare.piece,\n\t\t\t\t\t\tsquare : currentSquare\n\t\t\t\t\t};\n\n\t\t\t\t\tif (context.attacked) {\n\t\t\t\t\t\t// verify that the square is actually attacked\n\t\t\t\t\t\tPieceValidation\n\t\t\t\t\t\t\t.create(context.piece.type, b)\n\t\t\t\t\t\t\t.start(currentSquare, setAttacked(context));\n\t\t\t\t\t\tcurrentSquare = null;\n\t\t\t\t\t} else if (context.blocked) {\n\t\t\t\t\t\tcurrentSquare = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentSquare = b.getNeighborSquare(currentSquare, n);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn context;\n\t\t\t},\n\t\t\tisAttackedByKnight = (b, n) => {\n\t\t\t\tlet\n\t\t\t\t\tcontext,\n\t\t\t\t\tcurrentSquare = b.getNeighborSquare(sq, n);\n\n\t\t\t\tcontext = {\n\t\t\t\t\tattacked : false,\n\t\t\t\t\tblocked : false,\n\t\t\t\t\tpiece : currentSquare ? currentSquare.piece : currentSquare,\n\t\t\t\t\tsquare : currentSquare\n\t\t\t\t};\n\n\t\t\t\tif (currentSquare &&\n\t\t\t\t\tcurrentSquare.piece &&\n\t\t\t\t\tcurrentSquare.piece.type === PieceType.Knight) {\n\t\t\t\t\tPieceValidation\n\t\t\t\t\t\t.create(PieceType.Knight, b)\n\t\t\t\t\t\t.start(currentSquare, setAttacked(context));\n\t\t\t\t}\n\n\t\t\t\treturn context;\n\t\t\t},\n\t\t\tself = this,\n\t\t\tsetAttacked = (c) => {\n\t\t\t\treturn (err, squares) => {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\t\t\t\t\tif (squares[i] === sq) {\n\t\t\t\t\t\t\t\tc.attacked = true;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tc.attacked = false;\n\t\t\t\t};\n\t\t\t};\n\n\t\treturn [\n\t\t\tisAttacked(self.board, NeighborType.Above),\n\t\t\tisAttacked(self.board, NeighborType.AboveRight),\n\t\t\tisAttacked(self.board, NeighborType.Right),\n\t\t\tisAttacked(self.board, NeighborType.BelowRight),\n\t\t\tisAttacked(self.board, NeighborType.Below),\n\t\t\tisAttacked(self.board, NeighborType.BelowLeft),\n\t\t\tisAttacked(self.board, NeighborType.Left),\n\t\t\tisAttacked(self.board, NeighborType.AboveLeft),\n\t\t\t// fix for issue #4\n\t\t\tisAttackedByKnight(self.board, NeighborType.KnightAboveRight),\n\t\t\tisAttackedByKnight(self.board, NeighborType.KnightRightAbove),\n\t\t\tisAttackedByKnight(self.board, NeighborType.KnightBelowRight),\n\t\t\tisAttackedByKnight(self.board, NeighborType.KnightRightBelow),\n\t\t\tisAttackedByKnight(self.board, NeighborType.KnightBelowLeft),\n\t\t\tisAttackedByKnight(self.board, NeighborType.KnightLeftBelow),\n\t\t\tisAttackedByKnight(self.board, NeighborType.KnightAboveLeft),\n\t\t\tisAttackedByKnight(self.board, NeighborType.KnightLeftAbove)\n\t\t].filter((result) => result.attacked);\n\t}\n\n\tisSquareAttacked (sq) {\n\t\treturn this.findAttackers(sq).length !== 0;\n\t}\n\n\tstart (callback) {\n\t\t// ensure callback is set\n\t\tcallback = callback || ((err, validMoves) => new Promise((resolve, reject) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(validMoves);\n\t\t}));\n\n\t\tlet\n\t\t\ti = 0,\n\t\t\tkingSquare = null,\n\t\t\tsetValidMoves = (v, sq) => {\n\t\t\t\treturn (err, squares) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (squares && squares.length > 0) {\n\t\t\t\t\t\tv.push({\n\t\t\t\t\t\t\tsquares,\n\t\t\t\t\t\t\tsrc : sq\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\tsquares = [],\n\t\t\tvalidMoves = [];\n\n\t\tif (this.board) {\n\t\t\t// get squares with pieces for which to evaluate move options\n\t\t\tsquares = this.board.getSquares(this.game.getCurrentSide());\n\n\t\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\t\t// set king to refer to later\n\t\t\t\tif (squares[i].piece.type === PieceType.King) {\n\t\t\t\t\tkingSquare = squares[i];\n\t\t\t\t}\n\n\t\t\t\tif (squares[i] && squares[i].piece) {\n\t\t\t\t\tPieceValidation\n\t\t\t\t\t\t.create(squares[i].piece.type, this.board)\n\t\t\t\t\t\t.start(squares[i], setValidMoves(validMoves, squares[i]));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// perform king castle validation\n\t\t\tthis.evaluateCastle(validMoves);\n\n\t\t\t// make sure moves only contain escape & non-check options\n\t\t\tvalidMoves = this.filterKingAttack(kingSquare, validMoves);\n\n\t\t\t// find any pieces attacking the king\n\t\t\tthis.findAttackers(kingSquare).forEach((attacker) => {\n\t\t\t\tthis.game.emit(\n\t\t\t\t\t'check', {\n\t\t\t\t\t\tattackingSquare : attacker.square,\n\t\t\t\t\t\tkingSquare\n\t\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\treturn callback(new Error('board is invalid'));\n\t\t}\n\n\t\treturn callback(null, validMoves);\n\t}\n}\n\nexport default { BoardValidation };"],"file":"boardValidation.js"}