"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GameValidation = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _boardValidation = require("./boardValidation");

var _piece = require("./piece");

/**
	GameValidation is the 3rd phase of validation for the game
	and is intended to support Game level events. Examples of Game
	scope validation include Check, Checkmate, 3-fold position
	repetition and pawn promotion.
*/
var GameValidation =
/*#__PURE__*/
function () {
  function GameValidation(game) {
    (0, _classCallCheck2.default)(this, GameValidation);
    this.game = game;
  }

  (0, _createClass2.default)(GameValidation, [{
    key: "findKingSquare",
    value: function findKingSquare(side) {
      var i = 0,
          squares = this.game.board.getSquares(side);

      for (i = 0; i < squares.length; i++) {
        if (squares[i].piece.type === _piece.PieceType.King) {
          return squares[i];
        }
      }
    }
  }, {
    key: "isRepetition",
    value: function isRepetition() {
      var hash = '',
          hashCount = [],
          i = 0; // analyze 3-fold repetition (draw)

      for (i = 0; i < this.game.moveHistory.length; i++) {
        hash = this.game.moveHistory[i].hashCode;
        hashCount[hash] = hashCount[hash] ? hashCount[hash] + 1 : 1;
        /* eslint no-magic-numbers: 0 */

        if (hashCount[hash] === 3) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "start",
    value: function start(callback) {
      // ensure callback is set
      callback = callback || function (err, result) {
        return new _promise.default(function (resolve, reject) {
          if (err) {
            return reject(err);
          }

          return resolve(result);
        });
      };

      var kingSquare = null,
          result = {
        isCheck: false,
        isCheckmate: false,
        isFiftyMoveDraw: false,
        isRepetition: false,
        isStalemate: false,
        validMoves: []
      },
          setResult = function setResult(v, result, isKingAttacked) {
        return function (err, validMoves) {
          if (err) {
            return callback(err);
          }

          result.isCheck = isKingAttacked && validMoves.length > 0;
          result.isCheckmate = isKingAttacked && validMoves.length === 0;
          result.isStalemate = !isKingAttacked && validMoves.length === 0;
          result.isRepetition = v.isRepetition();
          result.validMoves = validMoves;
          return callback(null, result);
        };
      },
          v = _boardValidation.BoardValidation.create(this.game);

      if (this.game) {
        // find current side king square
        kingSquare = this.findKingSquare(this.game.getCurrentSide()); // find valid moves

        return v.start(setResult(this, result, v.isSquareAttacked(kingSquare)));
      } else {
        return callback(new Error('game is invalid'));
      }
    }
  }], [{
    key: "create",
    value: function create(game) {
      return new GameValidation(game);
    }
  }]);
  return GameValidation;
}();

exports.GameValidation = GameValidation;
var _default = {
  GameValidation: GameValidation
};
exports.default = _default;
//# sourceMappingURL=gameValidation.js.map
